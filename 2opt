def calculate_total_distance(route, graph):
    total_distance = 0
    for i in range(len(route) - 1):
        distance = graph.get_weight(route[i], route[i + 1])
        if distance == float('inf'):
            return float('inf')  # Route is not possible
        total_distance += distance
    distance = graph.get_weight(route[-1], route[0])  # return to the starting point
    if distance == float('inf'):
        return float('inf')  # Route is not possible
    total_distance += distance
    return total_distance

def two_opt_swap(route, i, k):
    # Take route[0] to route[i-1] and add them in order to new_route
    new_route = route[0:i]
    # Take route[i] to route[k] and add them in reverse order to new_route
    new_route.extend(reversed(route[i:k + 1]))
    # Take route[k+1] to end and add them in order to new_route
    new_route.extend(route[k + 1:])
    return new_route

def two_opt_algorithm(route, graph):
    best_route = route
    best_distance = calculate_total_distance(best_route, graph)
    improved = True

    while improved:
        improved = False
        for i in range(1, len(route) - 1):
            for k in range(i + 1, len(route)):
                new_route = two_opt_swap(best_route, i, k)
                new_distance = calculate_total_distance(new_route, graph)
                if new_distance < best_distance:
                    best_route = new_route
                    best_distance = new_distance
                    improved = True
    return best_route, best_distance
